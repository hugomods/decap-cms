{{/* Register preview styles. */}}
{{- $css := resources.Get "decap-cms/scss/index.scss" }}
{{- $css = $css | toCSS (dict "targetPath" "css/decap-cms.css" "outputStyle" (cond hugo.IsProduction "compressed" "")) }}
{{- printf `CMS.registerPreviewStyle("%s");` $css.Permalink }}
{{- range default slice (default site.Params.decap_cms._preview_styles site.Params.decap_cms.preview_styles) }}
  {{- printf `CMS.registerPreviewStyle("%s");` (absURL .) }}
{{- end }}
{{/* Imports preview templates. */}}
{{- $previewTemplates := newScratch }}
{{- range $i, $pt := default slice site.Params.decap_cms._preview_templates }}
  {{- if or (not .name) (not .collections) }}
    {{- errorf "[decap-cms] preview template #%d missing required name or collections." $i }}
  {{- end }}
  {{- $name := .name }}
  {{- $templateName := replaceRE `[-\/]` "_" $name | printf "%s_preview" }}
  {{- if not ($previewTemplates.Get $templateName) }}
    {{- printf `import { default as %s } from "./preview-templates/%s";` $templateName $name }}
  {{- end }}
  {{- $previewTemplates.Add $templateName .collections }}
{{- end }}
{{- $widgets := slice }}
{{- range resources.Match "decap-cms/widgets/*.js" }}
  {{- $name := replace .Name "decap-cms/widgets/" "" }}
  {{- $name = replaceRE ".js$" "" $name }}
  {{- $widgetName := replaceRE `[^\w_]` "_" (printf "widget_%s" $name) }}
  {{- printf `import * as %s from "./widgets/%s";` $widgetName $name }}
  {{- $widgets = $widgets | append $widgetName }}
{{- end }}
{{- $editorComponents := slice }}
{{- range resources.Match "decap-cms/editor-components/*.js" }}
  {{- $name := replace .Name "decap-cms/editor-components/" "" }}
  {{- $name = replaceRE ".js$" "" $name }}
  {{- $componentName := replaceRE `[^\w_]` "_" (printf "editor_component_%s" $name) }}
  {{- printf `import { default as %s } from "./editor-components/%s";` $componentName $name }}
  {{- $editorComponents = $editorComponents | append $componentName }}
{{- end }}
const plainPreview = createClass({
  render: function() {
    return this.props.value;
  }
});
const emptySchema = {};
{{- range $widgets }}
  {{- printf "CMS.registerWidget(%s.name, %s.control, %s.preview ?? plainPreview, %s.schema ?? emptySchema);" . . . . }}
{{- end }}
{{- range $editorComponents }}
  {{- printf "CMS.registerEditorComponent(%s);" . }}
{{- end }}
{{/* Registers preview templates. */}}
{{- range $name, $collections := $previewTemplates.Values }}
  {{- range $collections }}
    {{- printf "CMS.registerPreviewTemplate('%s', %s);" . $name }}
  {{- end }}
{{- end }}
